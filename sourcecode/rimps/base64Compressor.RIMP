Search in IBM i 7.4


IBM i
Change version

7.4

Filter on titles
Database
PDF files for Database
Database overview
Database information finder
Administration
Commitment control
Geospatial Analytics
Performance and query optimization
What's new for IBM i 7.4
Print PDF
Query engine overview
Data access methods
Processing queries: Overview
Tools
Creating an index strategy
Application design tips
Programming techniques
Performance considerations
Db2 for i Services
IBM i Services
SYSTOOLS
Using SYSTOOLS
HTTP function overview
BASE64DECODE scalar function
BASE64ENCODE scalar function
HTTPBLOB and HTTPCLOB scalar functions
HTTPBLOBVERBOSE and HTTPCLOBVERBOSE table functions
HTTPDELETEBLOB and HTTPDELETECLOB scalar functions
HTTPDELETEBLOBVERBOSE and HTTPDELETECLOBVERBOSE table functions
HTTPGETBLOB and HTTPGETCLOB scalar functions
HTTPGETBLOBVERBOSE and HTTPGETCLOBVERBOSE table functions
HTTPHEAD scalar function
HTTPPOSTBLOB and HTTPPOSTCLOB scalar functions
HTTPPOSTBLOBVERBOSE and HTTPPOSTCLOBVERBOSE table functions
HTTPPUTBLOB and HTTPPUTCLOB scalar functions
HTTPPUTBLOBVERBOSE and HTTPPUTCLOBVERBOSE table functions
URLDECODE scalar function
URLENCODE scalar function
Database monitor formats
Messages reference
Programming
Reference
Troubleshooting
Related information for database

IBM i
7.4
FeedbackProduct list
BASE64ENCODE scalar function
Last Updated: 2022-10-22

The BASE64ENCODE function returns the Base64 encoded version of the binary values of a character string.

Read syntax diagramSkip visual syntax diagram
BASE64ENCODE
(
IN
 => 
character-string
)
The schema is SYSTOOLS.
character-string
A character expression to be encoded. The maximum length in 2732 characters.
The result of the function is a varying length character string in CCSID 1208 that contains the bytes of character-string as a Base64-encoded string.

Example
Encode a string that contains the value X'1122334455'.
VALUES SYSTOOLS.BASE64ENCODE(X'1122334455');

The result is: ESIzRFU=.
Encode a character string in CCSID 37 that contains the value 'ABC'.
VALUES SYSTOOLS.BASE64ENCODE('ABC');

The result is: wcLD
Encode a UTF-8 string that contains the value 'ABC'.
VALUES SYSTOOLS.BASE64ENCODE(CAST('ABC' AS VARCHAR(10) CCSID 1208));

The result is: QUJD
Parent topic: 
HTTP function overview
Was this topic helpful?
Yes
No







© Copyright IBM Corporation 2002, 2019
Contact IBM
Privacy
Terms of use
Accessibility
Cookie Preferences
English


close icon
About cookies on this site
Our websites require some cookies to function properly (required). In addition, other cookies may be used with your consent to analyze site usage, improve the user experience and for advertising.
For more information, please review your Cookie preferences options and IBM’s privacy statement.
To provide a smooth navigation, your cookie preferences will be shared across the IBM web domains listed here.
Accept all
Required only

BASE64
Decode and Encode
Do you have to deal with Base64 format? Then this site is perfect for you! Use our super handy online tool to encode or decode your data.

Encode to Base64 format
Simply enter your data then push the encode button.
Search in IBM i 7.4


IBM i
Change version

7.4

Filter on titles
Database
PDF files for Database
Database overview
Database information finder
Administration
Commitment control
Geospatial Analytics
Performance and query optimization
What's new for IBM i 7.4
Print PDF
Query engine overview
Data access methods
Processing queries: Overview
Tools
Creating an index strategy
Application design tips
Programming techniques
Performance considerations
Db2 for i Services
IBM i Services
SYSTOOLS
Using SYSTOOLS
HTTP function overview
BASE64DECODE scalar function
BASE64ENCODE scalar function
HTTPBLOB and HTTPCLOB scalar functions
HTTPBLOBVERBOSE and HTTPCLOBVERBOSE table functions
HTTPDELETEBLOB and HTTPDELETECLOB scalar functions
HTTPDELETEBLOBVERBOSE and HTTPDELETECLOBVERBOSE table functions
HTTPGETBLOB and HTTPGETCLOB scalar functions
HTTPGETBLOBVERBOSE and HTTPGETCLOBVERBOSE table functions
HTTPHEAD scalar function
HTTPPOSTBLOB and HTTPPOSTCLOB scalar functions
HTTPPOSTBLOBVERBOSE and HTTPPOSTCLOBVERBOSE table functions
HTTPPUTBLOB and HTTPPUTCLOB scalar functions
HTTPPUTBLOBVERBOSE and HTTPPUTCLOBVERBOSE table functions
URLDECODE scalar function
URLENCODE scalar function
Database monitor formats
Messages reference
Programming
Reference
Troubleshooting
Related information for database

IBM i
7.4
FeedbackProduct list
BASE64ENCODE scalar function
Last Updated: 2022-10-22

The BASE64ENCODE function returns the Base64 encoded version of the binary values of a character string.

Read syntax diagramSkip visual syntax diagram
BASE64ENCODE
(
IN
 => 
character-string
)
The schema is SYSTOOLS.
character-string
A character expression to be encoded. The maximum length in 2732 characters.
The result of the function is a varying length character string in CCSID 1208 that contains the bytes of character-string as a Base64-encoded string.

Example
Encode a string that contains the value X'1122334455'.
VALUES SYSTOOLS.BASE64ENCODE(X'1122334455');

The result is: ESIzRFU=.
Encode a character string in CCSID 37 that contains the value 'ABC'.
VALUES SYSTOOLS.BASE64ENCODE('ABC');

The result is: wcLD
Encode a UTF-8 string that contains the value 'ABC'.
VALUES SYSTOOLS.BASE64ENCODE(CAST('ABC' AS VARCHAR(10) CCSID 1208));

The result is: QUJD
Parent topic: 
HTTP function overview
Was this topic helpful?
Yes
No







© Copyright IBM Corporation 2002, 2019
Contact IBM
Privacy
Terms of use
Accessibility
Cookie Preferences
English


close icon
About cookies on this site
Our websites require some cookies to function properly (required). In addition, other cookies may be used with your consent to analyze site usage, improve the user experience and for advertising.
For more information, please review your Cookie preferences options and IBM’s privacy statement.
To provide a smooth navigation, your cookie preferences will be shared across the IBM web domains listed here.
Accept all
Required only
To encode binaries (like images, documents, etc.) use the file upload form a little further down on this page.
Result goes here...
Encode files to Base64 format
Select a file to upload and process, then you can download the encoded result.
0No file chosen
The maximum file size is 192MB.
Bonus tip: Bookmark us!

Other tools
Partner sites

About
Meet Base64 Decode and Encode, a simple online tool that does exactly what it says: decodes from Base64 encoding as well as encodes into it quickly and easily. Base64 encode your data without hassles or decode it into a human-readable format.

Base64 encoding schemes are commonly used when there is a need to encode binary data, especially when that data needs to be stored and transferred over media that are designed to deal with text. This encoding helps to ensure that the data remains intact without modification during transport. Base64 is used commonly in a number of applications including email via MIME, as well as storing complex data in XML or JSON.

Advanced options
Character set: Our website uses the UTF-8 character set, so your input data is transmitted in that format. Change this option if you want to convert the data to another character set before encoding. Note that in case of text data, the encoding scheme does not contain the character set, so you may have to specify the appropriate set during the decoding process. As for files, the binary option is the default, which will omit any conversion; this option is required for everything except plain text documents.
Newline separator: Unix and Windows systems use different line break characters, so prior to encoding either variant will be replaced within your data by the selected option. For the files section, this is partially irrelevant since files already contain the corresponding separators, but you can define which one to use for the "encode each line separately" and "split lines into chunks" functions.
Encode each line separately: Even newline characters are converted to their Base64 encoded forms. Use this option if you want to encode multiple independent data entries separated with line breaks. (*)
Split lines into chunks: The encoded data will become a continuous text without any whitespaces, so check this option if you want to break it up into multiple lines. The applied character limit is defined in the MIME (RFC 2045) specification, which states that the encoded lines must be no more than 76 characters long. (*)
Perform URL-safe encoding: Using standard Base64 in URLs requires encoding of "+", "/" and "=" characters into their percent-encoded form, which makes the string unnecessarily longer. Enable this option to encode into an URL- and filename- friendly Base64 variant (RFC 4648 / Base64URL) where the "+" and "/" characters are respectively replaced by "-" and "_", as well as the padding "=" signs are omitted.
Live mode: When you turn on this option the entered data is encoded immediately with your browser's built-in JavaScript functions, without sending any information to our servers. Currently this mode supports only the UTF-8 character set.
(*) These options cannot be enabled simultaneously since the resulting output would not be valid for the majority of applications.

Safe and secure

All communications with our servers come through secure SSL encrypted connections (https). We delete uploaded files from our servers immediately after being processed and the resulting downloadable file is deleted right after the first download attempt or 15 minutes of inactivity (whichever is shorter). We do not keep or inspect the contents of the submitted data or uploaded files in any way. Read our privacy policy below for more details.

Completely free

Our tool is free to use. From now on, you don't need to download any software for such simple tasks.

Details of the Base64 encoding

Base64 is a generic term for a number of similar encoding schemes that encode binary data by treating it numerically and translating it into a base-64 representation. The Base64 term originates from a specific MIME-content transfer encoding.

Design

The particular choice of characters to make up the 64 characters required for Base64 varies between implementations. The general rule is to choose a set of 64 characters that is both 1) part of a subset common to most encodings, and 2) also printable. This combination leaves the data unlikely to be modified in transit through systems such as email, which were traditionally not 8-bit clean. For example, MIME's Base64 implementation uses A-Z, a-z, and 0-9 for the first 62 values, as well as "+" and "/" for the last two. Other variations, usually derived from Base64, share this property but differ in the symbols chosen for the last two values; an example is the URL and filename safe "RFC 4648 / Base64URL" variant, which uses "-" and "_".

Example

Here's a quote snippet from Thomas Hobbes's Leviathan:

"Man is distinguished, not only by his reason, but ..."

This is represented as an ASCII byte sequence and encoded in MIME's Base64 scheme as follows:

TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCAuLi4=

In the above quote the encoded value of Man is TWFu. Encoded in ASCII, the letters "M", "a", and "n" are stored as the bytes 77, 97, 110, which are equivalent to "01001101", "01100001", and "01101110" in base-2. These three bytes are joined together in a 24 bit buffer producing the binary sequence "010011010110000101101110". Packs of 6 bits (6 bits have a maximum of 64 different binary values) are converted into 4 numbers (24 = 4 * 6 bits) which are then converted to their corresponding values in Base64.

Text content	M	a	n
ASCII	77	97	110
Bit pattern	0	1	0	0	1	1	0	1	0	1	1	0	0	0	0	1	0	1	1	0	1	1	1	0
Index	19	22	5	46
Base64-encoded	T	W	F	u

As this example illustrates, Base64 encoding converts 3 uncoded bytes (in this case, ASCII characters) into 4 encoded ASCII characters.
2010-2022 base64encode.org
This website uses cookies. We use cookies to personalise content/ads and to analyse our traffic.
Logo for Chester County Technical College High School
Chester County Technical College High School

Welcome, THADDEUS TUNNEY
Help
Log Out
Amatrol Learning Center
eLearning Courses
My Progress Report
Messages
Notifications
Edit My Info
Log Out
eLearning Courses
Search...
 
 
Recent Courses
   MECH 105 (WC03118-AA00UEN) - Industry 4.0: Course 5 - Electricity in Mechatronics
Electrical Systems for Mechatronics Students
Amatrol interactive multimedia content with hardware 1 Basic Electrical Circuits			Pre-Quiz: 40%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 2 Electrical Voltage and Current Measurement			Pre-Quiz: 44%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 3 Electrical Resistance Measurement			Pre-Quiz: 29%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 4 Power in Electrical Circuits			Pre-Quiz: 14%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 5 Control Logic Circuits			Pre-Quiz: 13%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 6 Electrical Control Diagrams			Pre-Quiz: 0%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 7 Relay Control Circuits			Pre-Quiz: 0%	Launch	Quiz		
Libraries
 AMATROL - Main Library ContentExpires: 2023-09-13
 Custom
  MECH 105 (WC03118-AA00UEN) - Industry 4.0: Course 5 - Electricity in Mechatronics
Electrical Systems for Mechatronics Students
Amatrol interactive multimedia content with hardware 1 Basic Electrical Circuits			Pre-Quiz: 40%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 2 Electrical Voltage and Current Measurement			Pre-Quiz: 44%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 3 Electrical Resistance Measurement			Pre-Quiz: 29%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 4 Power in Electrical Circuits			Pre-Quiz: 14%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 5 Control Logic Circuits			Pre-Quiz: 13%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 6 Electrical Control Diagrams			Pre-Quiz: 0%	Launch	Quiz		
Amatrol interactive multimedia content with hardware 7 Relay Control Circuits			Pre-Quiz: 0%	Launch	Quiz		
  MECH 101 (WC03752-XX00XEN) - Industry 4.0: Course 1 - Introduction to Mechatronics
  MECH 102 (WC03753-XX00XEN) - Industry 4.0: Course 2 - Safety in Mechatronics
  MECH 103 (WC03754-XA00XEN) - Industry 4.0: Course 3 - Measurements in Mechatronics
  MECH 104 (WC03755-XA00UEN) - Industry 4.0: Course 4 - Fluid Power in Mechatronics
 Electrical
Copyright ©2022 Amatrol, INC. | Terms of Use
Skip to main contentSwitch to page by page results
Accessibility help
Accessibility feedback
Veterans Day 2022
Veterans Day 2022
bat exit function
Camera search

All
VideosNewsImagesMore
Tools
SafeSearch on
About 27,900,000 results (0.62 seconds) 
Including results for batch exit function
Search only for bat exit function


How to exit a batch function? - Stack Overflowhttps://stackoverflow.com › questions › how-to-exit-a-b...
Jan 13, 2018 · 1 answer
You can use goto :eof to terminate a subroutine (reaching end-of-file terminates the routine and returns to the statement after the call ) OR ...
Exit batch script from inside a function - Stack Overflow
6 answers
Jul 12, 2010
How can I exit a batch file from within a function?
4 answers
Apr 27, 2017
Where does GOTO :EOF return to? - batch file ...
4 answers
May 22, 2017
Exit from nested batch file - Stack Overflow
5 answers
Apr 25, 2017
More results from stackoverflow.com

Exit - Terminate a script - Windows CMD - SS64.comhttps://ss64.com › exit
Syntax EXIT [/B] [exitCode] Key /B When used in a batch script, this option will exit only the script (or subroutine) but not CMD.EXE If executed on the command ...

Exiting a batch from a function - DosTips.comhttps://www.dostips.com › ... › DOS Batch Forum
Mar 2, 2016 · 5 posts · 2 authors
Hi, I found here detail D.Benham's analysis showing that exiting a batch from withing a function by adding a syntax error has bad side ...
Batch Functions: goto:eof, exit /b and structure ...
15 posts
Jun 2, 2011
exit function and preserve variable over endlocal barrier
15 posts
Jun 9, 2015
More results from www.dostips.com

Exit batch file from subroutine - Super Userhttps://superuser.com › questions › exit-batch-file-from...
Dec 8, 2009 — If I use the EXIT command, I simply return to the line where I called the subroutine, and execution continues. Here's an example: @echo off ECHO ...
5 answers
 
·
 
24 votes: 
Add this to the top of your batch file: @ECHO OFF SETLOCAL IF "%selfWrapped%"=="" ( REM ...
Prevent "Exit" command in script to close Cmd - Super User
Mar 26, 2021
Called file with exit /b exits main file batch - Super User
Sep 16, 2018
How to check the exit code of the last command in batch file?
Oct 1, 2010
Error handling in Batch script when a batch script failed
Jan 18, 2021
More results from superuser.com

What are batch file exit codes or errorlevels? - ManageEnginehttps://www.manageengine.com › desktop-central › bat...
EXIT /B at the end of the batch file will stop execution of a batch file. use EXIT /B < exitcodes > at the end of the batch file to return custom return codes.
People also ask
How do you exit a batch function?
What is exit b1?
What does @echo off do?
What is exit in the command line?
Feedback

exit /b in Windows batch script - My Programming Noteshttps://myprogrammingnotes.com › exit-b-windows-bat...
Jan 22, 2020 — exit /b is often seen in a Windows bat file. When the script runs to the “exit /b” line, the commands after this line are not executed and ...

Batch File Functions (Introduction And Tutorial) - Trytoprogramhttp://www.trytoprogram.com › batch-file-functions
As shown in syntax, a function definition in batch file starts with the declaration of a function with a label. Next is the body of function where we write ...

exit | Microsoft Learnhttps://learn.microsoft.com › ... › Reference
Jul 29, 2021 — Exits the current batch script instead of exiting Cmd.exe. If executed from outside a batch script, exits Cmd.exe. <exitcode>, Specifies a ...
Missing: function ‎| Must include: function

Exiting a batch file without exiting the command shellhttps://devblogs.microsoft.com › oldnewthing
Aug 2, 2012 — And since it is a batch file, execution of the called subroutine ends when execution falls off the end of the file. And that's where the special ...

Batch Script - Return Code - Tutorialspointhttps://www.tutorialspoint.com › batch_script › batch_s...
EXIT /B at the end of the batch file will stop execution of a batch file. Use EXIT /B < exitcodes > at the end of the batch file to return custom return codes.
Related searches
batch exit command
exit /b 0 meaning
batch exit /b
batch - function
batch exit code
exit command prompt
cmd. exit code
exit /b 1 in batch file
1	
2
3
4
5
6
7
8
Next
Downingtown, Pennsylvania - From your IP address
 - Update location
HelpSend feedbackPrivacyTerms